import com.mscharley.random._
import org.scalatest.FlatSpec

class SplitMixSpec extends FlatSpec {
  def checkSequence(seed : Long)(values : Long*) : Unit = {
    val sm = splitmix64(seed)
    assert(sm.take(values.length).toList == values)
  }

  "SplitMix64" should "calculate the right sequence of numbers for a seed of 1513817156475045394" in
    checkSequence(1513817156475045394L)(
      -3626855871036418500L,
      5037142008337821566L,
      -3562918846162485440L,
      6147600479854282459L,
      -2107227943531753716L,
      7305139801090763158L,
      45944157781804797L,
      -7238041443203849113L,
      4935327494810927L,
      -7465686127882598073L,
      878344852229720568L,
      3574408971783286528L,
      9214682511526103307L,
      729294334327866990L,
      7597411072756597084L,
      -2629190600061795611L,
      -7244729470018064912L,
      -7593388130241446607L,
      1606672671596115209L,
      -962285391878890975L
    )

  it should "calculate the right sequence of numbers for a seed of -3624042228962942470" in
    checkSequence(-3624042228962942470L)(
      -8093141376403486867L,
      -1660797054317164888L,
      -5301483877711544407L,
      1053859684402764631L,
      -8809592461628447777L,
      -56351121158468066L,
      -5516092378996299582L,
      1478019966702993026L,
      -6961362406803094976L,
      4527174060234373935L,
      -6985005261186685921L,
      -2631743966849514590L,
      -9000478326812591951L,
      -6592178640585358827L,
      -1520793705359419990L,
      8438955686061858502L,
      3127114024932263503L,
      2969998919417794721L,
      -400589350608139551L,
      3909748544636780242L
    )

  it should "calculate the right sequence of numbers for a seed of 3531207199216388937" in
    checkSequence(3531207199216388937L)(
      -3206994160392332939L,
      -4012469958504412667L,
      7688722805700151260L,
      -8186447116185818914L,
      9119627738804668866L,
      6465616336965940866L,
      7272417000192644268L,
      2400378858552795454L,
      9211185551331753954L,
      6324808756497678386L,
      -596204120810283059L,
      -4204049282940173092L,
      2993640038985319438L,
      -9046652693398636704L,
      -1927112923864687358L,
      7331671517499201742L,
      -2549640936755132433L,
      -7358605727140964702L,
      4727220835533094256L,
      1137108542316277383L
    )

  it should "calculate the right sequence of numbers for a seed of 608525831176989228" in
    checkSequence(608525831176989228L)(
      7458925378891065981L,
      -4668862760993682703L,
      145865224688153713L,
      7619562588402593909L,
      8947804235711737461L,
      652799901022242297L,
      -4132423561366547548L,
      -108239521146601457L,
      4720074345220598289L,
      -3704014221621206302L,
      1089816034498358065L,
      -1537844168084212989L,
      8376087376569079188L,
      4709888078107164101L,
      -5917848797594813537L,
      8659727343914311863L,
      -2264127904877668051L,
      9185121410365109402L,
      -6970381369069289732L,
      -3337446517345151332L
    )

  it should "calculate the right sequence of numbers for a seed of 2243454288033855382" in
    checkSequence(2243454288033855382L)(
      -5828467925148123703L,
      -5879922502433020984L,
      -8558671607890461517L,
      -3891284283703580998L,
      -2710682958278085780L,
      -744668874983046469L,
      1008577969107082690L,
      7753778749835104823L,
      -6252953929927214019L,
      -736347964098444110L,
      -7561126437727570687L,
      -5957881925139424809L,
      7582844502024937043L,
      -1411151789159259645L,
      -2903941993630572853L,
      -8206466541304161149L,
      4976485895977455496L,
      -5374008580841091950L,
      1572495047076487624L,
      -4112667763505259621L
    )
}
